#!/usr/bin/env python

import curses

from pytask.view import CurseView
from pytask.model import Tasklist, Task


class PyTaskApp:
    def __init__(self):
        self.tasklists = Tasklist.all()
        self.view = CurseView(self.tasklists)

    def application(self):
        while True:
            c = self.view.stdscr.getch()
            if c == ord('q'):
                self.view.quit()
                break
            elif c == ord('k') or c == ord('j'):
                self.view.move(c)
            elif c == ord('\t'):
                self.view.switch_window(c)
            elif c == ord('h') or c == ord('l'):
                self.view.switch_window(c)
            elif c == curses.KEY_RESIZE:
                self.view.resize()
            elif c == ord('o'):
                text = self.input()
                self.view.btext.text = ''
                self.view.btext.redraw()
                if len(text) > 0:
                    if self.view.is_cursor_on_menu:
                        self.tasklists.append(Tasklist.create(title=text))
                    else:
                        self.tasklists[self.view.menu.curs_pos].tasks.append(
                            Task.create(
                                tasklist=self.tasklists[self.view.menu.curs_pos].id,
                                title=text
                            )
                        )
                    self.view.move(ord('k'))

    def input(self):
        text = ''
        model = 'Tasklist' if self.view.is_cursor_on_menu else 'Task'
        self.view.btext.text = f'{model} title : {text}'
        self.view.btext.redraw()
        while True:
            c = self.view.stdscr.getch()
            if c == 10:
                return text
            elif c == 27:
                return ''
            elif c == 127:
                if len(text) > 0:
                    text = text[:-1]
                    self.view.btext.redraw()
                else:
                    curses.beep()
            elif ord('A') < c < ord('z'):
                text += chr(c)
                self.view.btext.text = f'{model} title : {text}'
                self.view.btext.redraw()






PyTaskApp().application()
